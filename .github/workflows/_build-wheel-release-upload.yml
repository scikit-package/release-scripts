name: Build Wheel, Release, Upload

on:
  workflow_call:
    inputs:
      project:
        description: 'Name of the project to build and release'
        default: 'PROJECT_NAME'
        required: false
        type: string
      c_extension:
        description: 'Whether the project has a C extension'
        default: false
        required: false
        type: boolean
      maintainer_github_username:
        description: GitHub username authorized to start GitHub/PyPI release'
        required: true
        type: string
    secrets:
      PYPI_TOKEN:
        description: 'PyPI token'
        required: true
      PAT_TOKEN:
        description: 'GitHub Personal Access Token'
        required: true

jobs:
  tag-privilege-check:
    uses: ./.github/workflows/_release_tag_privilege_check.yml
    with:
      maintainer_github_username: ${{ inputs.maintainer_github_username }}

  build-pure-python-package:
    needs: [tag-privilege-check]
    if: inputs.c_extension == false
    uses: ./.github/workflows/_build-pure-python-package.yml

  build-non-pure-python-package:
    needs: [tag-privilege-check]
    if: inputs.project == 'diffpy.pdffit2' || inputs.project == 'diffpy.srreal' || inputs.project == 'pyobjcryst'
    uses: ./.github/workflows/_build-non-pure-package.yml

  update-changelog:
    # The always() function is necessary to ensure that we wait for both build jobs to complete, even if one of them is skipped.
    # Without always(), if one of the needed jobs is skipped, the `update-changelog` job will not be executed.
    if: "always() && !contains(github.ref, 'rc')"
    needs: [build-pure-python-package, build-non-pure-python-package]
    uses: ./.github/workflows/_update_changelog.yml
    secrets:
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

  delete-create-new-tag:
    # For a full release, we delete and create a new tag to reflect the latest changes in the CHANGELOG.rst.
    # Recall that during the full release, the `main` branch's CHANGELOG.rst has been updated, and we want the
    # tag to reflect the latest changes in the CHANGELOG.rst done by the update-changelog above.
    # For more discussions, please read https://github.com/scikit-package/release-scripts/pull/120
    # Always run this job for a full release but fail if the update-changelog job previously failed.
    if: "always() && !contains(github.ref, 'rc')"
    needs: [update-changelog]
    uses: ./.github/workflows/_delete_create_tag.yml
    with:
      update_changelog_result: ${{ needs.update-changelog.result }}

  github-pre-release:
    if: "always() && contains(github.ref, 'rc')"
    needs: [build-pure-python-package, build-non-pure-python-package]
    uses: ./.github/workflows/_github_pre_release.yml

  github-release:
    if: "always() && !contains(github.ref, 'rc')"
    needs: [delete-create-new-tag]
    uses: ./.github/workflows/_github_release.yml
    with:
      delete-create-new-tag-result: ${{ needs.delete-create-new-tag.result }}

  pypi-publish:
    needs: [github-pre-release, github-release]
    runs-on: ubuntu-latest
    if: always()  # This job will always initiate regardless of the success or failure of the needed jobs
    steps:
      - name: Fail pypi-publish job if github-(pre)-release job failed
        run: |
          if [ "${{ needs.github-pre-release.result }}" == 'success' ] || [ "${{ needs.github-release.result }}" == 'success' ]; then
            echo "Ready for PyPI release..."
          else
            echo "Previous github-(pre)-release job failed; exiting..."
            exit 1
          fi

      - uses: actions/download-artifact@v4
        with:
          pattern: '**/*' # Make sure all files are downloaded, including wheels
          path: dist
          merge-multiple: true

      - name: Setup Python for PyPI upload
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Twine
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Publish package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/* --verbose

  docs:
    needs: [github-pre-release, github-release]
    if: always()
    uses: ./.github/workflows/_publish-docs-on-release.yml
    with:
      project: ${{ inputs.project }}
      c_extension: ${{ inputs.c_extension }}
