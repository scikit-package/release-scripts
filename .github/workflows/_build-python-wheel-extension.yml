name: Build wheel and sdist for an extension Python package

on:
  workflow_call:
    inputs:
      project:
        description: 'Name of the project to build'
        default: 'PROJECT_NAME'
        required: true
        type: string

jobs:
  build_sdist:
    defaults:
        run:
          shell: bash -l {0}

    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Initialize miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: sdist
          channels: conda-forge
          auto-update-conda: true
          auto-activate-base: false
          python-version: 3.14

      - name: Conda config
        run: >-
          conda config --set always_yes yes
          --set changeps1 no

      - name: Build sdist
        run: |
          conda install --file requirements/conda.txt
          pip install --upgrade build
          python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: ./dist/*.tar.gz

  build-wheel:
    needs: [build_sdist]
    defaults:
        run:
          shell: bash -l {0}

    name: cibw-wheels-${{ matrix.python }}-${{ matrix.buildplat }}
    runs-on: ${{ matrix.buildplat }}
    strategy:
      fail-fast: false
      matrix:
        buildplat:
          - ubuntu-latest
          - macos-13
          - macos-14
          - windows-latest
        python:
          - "3.12"
          - "3.13"
          - "3.14"

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Initialize miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: build
          channels: conda-forge
          auto-update-conda: true
          auto-activate-base: false
          python-version: ${{ matrix.python }}

      - name: Conda config
        run: >-
          conda config --set always_yes yes
          --set changeps1 no

      - name: Install requirements and build wheels
        run: |
          conda install --file requirements/conda.txt
          conda install --file requirements/pip.txt
          pip install --upgrade build
          python -m pip wheel --no-deps --wheel-dir ./dist .

      - name: Repair wheels
        if: matrix.buildplat == 'ubuntu-latest'
        run: |
          conda install auditwheel patchelf
          LD_LIBRARY_PATH=$CONDA_PREFIX/lib auditwheel repair dist/*.whl -w dist/

          set -euo pipefail
          project="${{ inputs.project }}"
          project_path="${project//./\/}"
          project_pkg="${project//./_}"

          dist_dir="$(pwd)/dist"
          for whl in "$dist_dir"/*manylinux*.whl; do
            echo "Patching $whl"
            tmp=$(mktemp -d)
            unzip -q "$whl" -d "$tmp"

            libsdir="$tmp/${project_pkg}.libs"
            declare -A vend_map

            for f in "$libsdir"/*.so*; do
              base=$(basename "$f")
              if [[ $base =~ ^(.+)-([0-9a-f]{8})(\.so.*)$ ]]; then
                real="${BASH_REMATCH[1]}${BASH_REMATCH[3]}"
              else
                real="$base"
              fi
              vend_map["$base"]="$real"
            done

            find "$tmp/$project_path" -type f -name "*.so" | while read -r so; do
              for vend in "${!vend_map[@]}"; do
                real=${vend_map[$vend]}
                echo "    replace-needed $vend â†’ $real in $so"
                patchelf --replace-needed "$vend" "$real" "$so"
              done
              if [[ "$project" == *.* ]]; then
                rpath='$ORIGIN/../../../../'
              else
                rpath='$ORIGIN/../../../'
              fi
              echo "    set-rpath in $so"
              patchelf --set-rpath "$rpath" "$so"
            done

            rm -f "$libsdir"/*.so*
            rm -f "$whl"
            ( cd "$tmp" && zip -q -FS -r "$whl" . )
            rm -rf "$tmp"
          done

          echo "Patch done!"
          rm dist/*-linux_*.whl

      - name: Upload wheels to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.python }}-${{ matrix.buildplat }}.whl
          path: ./dist/*.whl

  test-wheels:
    needs: [build-wheel]
    defaults:
        run:
          shell: bash -l {0}

    name: test-wheels-${{ matrix.python }}-${{ matrix.buildplat }}
    runs-on: ${{ matrix.buildplat }}
    strategy:
      fail-fast: false
      matrix:
        buildplat:
          - ubuntu-latest
          - macos-13
          - macos-14
          - windows-latest
        python:
          - "3.12"
          - "3.13"
          - "3.14"

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.python }}-${{ matrix.buildplat }}.whl
          path: ./dist

      - name: Initialize miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: test
          channels: conda-forge
          auto-update-conda: true
          auto-activate-base: false
          python-version: ${{ matrix.python }}

      - name: Conda config
        run: >-
          conda config --set always_yes yes
          --set changeps1 no

      - name: Install requirements
        run: |
          conda install --file requirements/conda.txt
          conda install --file requirements/tests.txt

      - name: Install wheel and test
        run: |
          pip install ./dist/*.whl
          pytest
